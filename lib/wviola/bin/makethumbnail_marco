#!/bin/bash
# This will make a thumbnail out of a video

if [[ $# -ne 5 ]]; then
	echo $0 source position crop scale format
	echo Example:
	echo $0 /tmp/myvideofile.mpeg 20 540:576 320:240 jpeg
	echo "The output will be FRAME=tempfile in case of success, FRAME=none in case of failure"
	# from movie /tmp/myvideofile.mpeg
	# take a frame after 20 seconds (more or less)
	# cropping an area of 540:576 and scaling to 320:240
	# and saving the image in jpeg format
	exit 1
fi

SOURCE="$1"
POSITION=$2
CROP=$3
SCALE=$4

# Format quirks
#
case $5 in
	jpeg)
		FORMAT=mjpeg
		;;
	*)
		FORMAT=$5
		;;
esac

TEMPFILE=$(mktemp)

ffmpeg -i "$SOURCE" -ss $POSITION -vframes 1 -vf crop=$CROP,scale=$SCALE -f image2 -vcodec $FORMAT $TEMPFILE >/dev/null 2>/dev/null

# if the position is past the last keyframe no frame is extracted

if [[ $? -eq 0 ]]; then
	echo FRAME=$TEMPFILE
	#identify $TEMPFILE
	# feh $TEMPFILE
else
	echo FRAME=none
fi


exit 

/*
to get a frame, mplayer seems to be much faster than ffmpeg

compare theese:

time ffmpeg -i a1.mpg -ss 300 -r 1 -f image2 picture.png
....
real	0m23.688s
user	0m23.125s
sys	0m0.560s

time mplayer -vo png  -frames 1 -ss 300 -ao null a1.mpg 
real	0m0.242s
user	0m0.132s
sys	0m0.048s

Seems like ffmpeg doesn't seek to the right position, simply sequentially follows the stream...

*/

