propel:

  sf_guard_user_profile:
    _attributes:  { phpName: sfGuardUserProfile }
    user_id:      { type: integer, foreignTable: sf_guard_user, foreignReference: id, required: true, onUpdate: cascade, onDelete: cascade, primaryKey: true }
    first_name:   varchar(50)
    last_name:    varchar(50)
    email:        varchar(255)
    imported_at:  timestamp
    updated_at:   timestamp

  asset:
    id: ~
    uniqid: { type: varchar(50), required: true, index: unique }
    binder_id: ~
    archive_id: ~   # where low_quality files are stored for backup purposes
    status: integer
    asset_type: integer
    notes: longvarchar
    source_filename: varchar(255)
    source_file_datetime: timestamp
    source_size: { type: bigint, index: true }
    source_lmd5sum: { type: varchar(34), index: true } # see why 34 below
    highquality_md5sum: varchar(32)
    highquality_size: { type: bigint, index: true }
    lowquality_md5sum: varchar(32)
    lowquality_size: { type: bigint, index: true }
    has_thumbnail: boolean
    thumbnail_width: integer
    thumbnail_height: integer
    thumbnail_size: integer
    thumbnail_position: float
    inode: bigint # this is the inode of the original file
    created_at: ~
    updated_at: ~
    _uniques:
      sm: [ source_size, source_lmd5sum ]

  video_asset:
    asset_id: { type: integer, foreignTable: asset, foreignReference: id, required: true, onUpdate: cascade, onDelete: cascade, primaryKey: true }
    duration: float
    highquality_width: integer
    highquality_height: integer
    highquality_video_codec: varchar(20)
    highquality_audio_codec: varchar(20)
    highquality_frame_rate: integer
    highquality_aspect_ratio: float
    lowquality_width: integer
    lowquality_height: integer
    lowquality_video_codec: varchar(20)
    lowquality_audio_codec: varchar(20)
    lowquality_frame_rate: integer

  picture_asset:
    asset_id: { type: integer, foreignTable: asset, foreignReference: id, required: true, onUpdate: cascade, onDelete: cascade, primaryKey: true }
    highquality_width: integer
    highquality_height: integer
    highquality_picture_format: varchar(10)
    lowquality_width: integer
    lowquality_height: integer
    lowquality_picture_format: varchar(10)

  photoalbum_asset:
    asset_id: { type: integer, foreignTable: asset, foreignReference: id, required: true, onUpdate: cascade, onDelete: cascade, primaryKey: true }
    pictures_count: integer

  audio_asset:
    asset_id: { type: integer, foreignTable: asset, foreignReference: id, required: true, onUpdate: cascade, onDelete: cascade, primaryKey: true }
    duration: float
    highquality_audio_codec: varchar(10)
    lowquality_audio_codec: varchar(10)

  binder:
    id:
    user_id:  { type: integer, foreignTable: sf_guard_user_profile, foreignReference: user_id, required: true, onUpdate: cascade, onDelete: cascade}
    category_id: ~
    title: varchar(255)
    code: varchar(25)
    event_date: date
    is_open: { type: boolean, default: true }
    archive_id: ~  # where high_quality files are stored for backup purposes
    created_at: ~
    updated_at: ~

  archive:
    id:  ~
    slug: varchar(50)
    archive_type: integer
    position: integer
    created_at: ~
    burned_at: timestamp
    user_id:  { type: integer, foreignTable: sf_guard_user_profile, foreignReference: user_id, required: false, onUpdate: cascade, onDelete: cascade}
    md5sum: varchar(32)

  category:
    id: ~
    shortcut: { type: varchar(5), index: unique }
    name: varchar(50)

  access_log_event:
    id: ~  
    asset_id:  ~
    user_id:      { type: integer, foreignTable: sf_guard_user_profile, foreignReference: user_id, required: true, onUpdate: cascade, onDelete: restrict }
    session: varchar(32)
    created_at: ~
    _uniques:
      aus: [asset_id, user_id, session]

  task_log_event:
    id: ~
    task_name: varchar(50)
    options: longvarchar
    arguments: longvarchar
    started_at: timestamp
    finished_at: timestamp
    task_exception: longvarchar


  source:
    id: ~
    user_id:  { type: integer, foreignTable: sf_guard_user_profile, foreignReference: user_id, required: true, onUpdate: cascade, onDelete: cascade }
    relative_path: { type: varchar(255), required: true, index: true }
    basename: { type: varchar(255), required: true, index: true }
    status: integer
    inode: bigint
    task_log_event_id: ~
    created_at: ~
    _indexes:
      pb: [ relative_path, basename ]

# Why 34 chars for md5sums?
# Dealing with big files (like video assets), it takes a long time to compute
# md5sums for the whole content.
# Since we use md5sums mainly to identify a file (avoiding undesired 
# duplications), we need only to have a check of the first portion of the file,
# speeding up things a bit.
# But in different configurations, we may choose a different portion of the file,
# so we need a way to store this information too.
# See lib/wviola/bin/limitedmd5sum for details about how this works.
